from enum import Enum
from plum import dispatch
from typing import TypeVar,Union,Generic,List,Tuple
from spire.xls.common import *
from spire.xls import *
from ctypes import *
import abc

class FontWrapper (  CommonWrapper, IInternalFont) :
    """

    """
    @property

    def Parent(self)->'SpireObject':
        """

        """
        GetDllLibXls().FontWrapper_get_Parent.argtypes=[c_void_p]
        GetDllLibXls().FontWrapper_get_Parent.restype=c_void_p
        intPtr = CallCFunction(GetDllLibXls().FontWrapper_get_Parent, self.Ptr)
        ret = None if intPtr==None else SpireObject(intPtr)
        return ret


    def BeginUpdate(self):
        """

        """
        GetDllLibXls().FontWrapper_BeginUpdate.argtypes=[c_void_p]
        CallCFunction(GetDllLibXls().FontWrapper_BeginUpdate, self.Ptr)

    def EndUpdate(self):
        """

        """
        GetDllLibXls().FontWrapper_EndUpdate.argtypes=[c_void_p]
        CallCFunction(GetDllLibXls().FontWrapper_EndUpdate, self.Ptr)

#
#    def add_AfterChangeEvent(self ,value:'EventHandler'):
#        """
#
#        """
#        intPtrvalue:c_void_p = value.Ptr
#
#        GetDllLibXls().FontWrapper_add_AfterChangeEvent.argtypes=[c_void_p ,c_void_p]
#        CallCFunction(GetDllLibXls().FontWrapper_add_AfterChangeEvent, self.Ptr, intPtrvalue)


#
#    def remove_AfterChangeEvent(self ,value:'EventHandler'):
#        """
#
#        """
#        intPtrvalue:c_void_p = value.Ptr
#
#        GetDllLibXls().FontWrapper_remove_AfterChangeEvent.argtypes=[c_void_p ,c_void_p]
#        CallCFunction(GetDllLibXls().FontWrapper_remove_AfterChangeEvent, self.Ptr, intPtrvalue)


    @property
    def IsBold(self)->bool:
        """
    <summary>
        True if the font is bold.
    </summary>
        """
        GetDllLibXls().FontWrapper_get_IsBold.argtypes=[c_void_p]
        GetDllLibXls().FontWrapper_get_IsBold.restype=c_bool
        ret = CallCFunction(GetDllLibXls().FontWrapper_get_IsBold, self.Ptr)
        return ret

    @IsBold.setter
    def IsBold(self, value:bool):
        GetDllLibXls().FontWrapper_set_IsBold.argtypes=[c_void_p, c_bool]
        CallCFunction(GetDllLibXls().FontWrapper_set_IsBold, self.Ptr, value)

    @property

    def KnownColor(self)->'ExcelColors':
        """
    <summary>
        Returns or sets the primary excel color of the object.
    </summary>
        """
        GetDllLibXls().FontWrapper_get_KnownColor.argtypes=[c_void_p]
        GetDllLibXls().FontWrapper_get_KnownColor.restype=c_int
        ret = CallCFunction(GetDllLibXls().FontWrapper_get_KnownColor, self.Ptr)
        objwraped = ExcelColors(ret)
        return objwraped

    @KnownColor.setter
    def KnownColor(self, value:'ExcelColors'):
        GetDllLibXls().FontWrapper_set_KnownColor.argtypes=[c_void_p, c_int]
        CallCFunction(GetDllLibXls().FontWrapper_set_KnownColor, self.Ptr, value.value)

    @property

    def Color(self)->'Color':
        """
    <summary>
        Returns or sets the primary color of the font.
    </summary>
        """
        GetDllLibXls().FontWrapper_get_Color.argtypes=[c_void_p]
        GetDllLibXls().FontWrapper_get_Color.restype=c_void_p
        intPtr = CallCFunction(GetDllLibXls().FontWrapper_get_Color, self.Ptr)
        ret = None if intPtr==None else Color(intPtr)
        return ret


    @Color.setter
    def Color(self, value:'Color'):
        GetDllLibXls().FontWrapper_set_Color.argtypes=[c_void_p, c_void_p]
        CallCFunction(GetDllLibXls().FontWrapper_set_Color, self.Ptr, value.Ptr)


    def SetThemeColor(self ,type:'ThemeColorType',tint:float):
        """

        """
        enumtype:c_int = type.value

        GetDllLibXls().FontWrapper_SetThemeColor.argtypes=[c_void_p ,c_int,c_double]
        CallCFunction(GetDllLibXls().FontWrapper_SetThemeColor, self.Ptr, enumtype,tint)

#
#    def GetThemeColor(self ,type:'ThemeColorType&',tint:'Double&')->bool:
#        """
#
#        """
#        intPtrtype:c_void_p = type.Ptr
#        intPtrtint:c_void_p = tint.Ptr
#
#        GetDllLibXls().FontWrapper_GetThemeColor.argtypes=[c_void_p ,c_void_p,c_void_p]
#        GetDllLibXls().FontWrapper_GetThemeColor.restype=c_bool
#        ret = CallCFunction(GetDllLibXls().FontWrapper_GetThemeColor, self.Ptr, intPtrtype,intPtrtint)
#        return ret


    @property
    def IsItalic(self)->bool:
        """
    <summary>
        True if the font style is italic. Read / write Boolean.
    </summary>
        """
        GetDllLibXls().FontWrapper_get_IsItalic.argtypes=[c_void_p]
        GetDllLibXls().FontWrapper_get_IsItalic.restype=c_bool
        ret = CallCFunction(GetDllLibXls().FontWrapper_get_IsItalic, self.Ptr)
        return ret

    @IsItalic.setter
    def IsItalic(self, value:bool):
        GetDllLibXls().FontWrapper_set_IsItalic.argtypes=[c_void_p, c_bool]
        CallCFunction(GetDllLibXls().FontWrapper_set_IsItalic, self.Ptr, value)

    @property
    def MacOSOutlineFont(self)->bool:
        """
    <summary>
        True if the font is an outline font. Read / write Boolean.
    </summary>
        """
        GetDllLibXls().FontWrapper_get_MacOSOutlineFont.argtypes=[c_void_p]
        GetDllLibXls().FontWrapper_get_MacOSOutlineFont.restype=c_bool
        ret = CallCFunction(GetDllLibXls().FontWrapper_get_MacOSOutlineFont, self.Ptr)
        return ret

    @MacOSOutlineFont.setter
    def MacOSOutlineFont(self, value:bool):
        GetDllLibXls().FontWrapper_set_MacOSOutlineFont.argtypes=[c_void_p, c_bool]
        CallCFunction(GetDllLibXls().FontWrapper_set_MacOSOutlineFont, self.Ptr, value)

    @property
    def MacOSShadow(self)->bool:
        """
    <summary>
        True if the font is a shadow font or if the object has
            a shadow. Read / write Boolean.
    </summary>
        """
        GetDllLibXls().FontWrapper_get_MacOSShadow.argtypes=[c_void_p]
        GetDllLibXls().FontWrapper_get_MacOSShadow.restype=c_bool
        ret = CallCFunction(GetDllLibXls().FontWrapper_get_MacOSShadow, self.Ptr)
        return ret

    @MacOSShadow.setter
    def MacOSShadow(self, value:bool):
        GetDllLibXls().FontWrapper_set_MacOSShadow.argtypes=[c_void_p, c_bool]
        CallCFunction(GetDllLibXls().FontWrapper_set_MacOSShadow, self.Ptr, value)

    @property
    def Size(self)->float:
        """
    <summary>
        Returns or sets the size of the font. Read / write integer.
    </summary>
        """
        GetDllLibXls().FontWrapper_get_Size.argtypes=[c_void_p]
        GetDllLibXls().FontWrapper_get_Size.restype=c_double
        ret = CallCFunction(GetDllLibXls().FontWrapper_get_Size, self.Ptr)
        return ret

    @Size.setter
    def Size(self, value:float):
        GetDllLibXls().FontWrapper_set_Size.argtypes=[c_void_p, c_double]
        CallCFunction(GetDllLibXls().FontWrapper_set_Size, self.Ptr, value)

    @property
    def IsStrikethrough(self)->bool:
        """
    <summary>
        True if the font is struck through with a horizontal line.
            Read / write Boolean
    </summary>
        """
        GetDllLibXls().FontWrapper_get_IsStrikethrough.argtypes=[c_void_p]
        GetDllLibXls().FontWrapper_get_IsStrikethrough.restype=c_bool
        ret = CallCFunction(GetDllLibXls().FontWrapper_get_IsStrikethrough, self.Ptr)
        return ret

    @IsStrikethrough.setter
    def IsStrikethrough(self, value:bool):
        GetDllLibXls().FontWrapper_set_IsStrikethrough.argtypes=[c_void_p, c_bool]
        CallCFunction(GetDllLibXls().FontWrapper_set_IsStrikethrough, self.Ptr, value)

    @property

    def StrikethroughType(self)->str:
        """

        """
        GetDllLibXls().FontWrapper_get_StrikethroughType.argtypes=[c_void_p]
        GetDllLibXls().FontWrapper_get_StrikethroughType.restype=c_void_p
        ret = PtrToStr(CallCFunction(GetDllLibXls().FontWrapper_get_StrikethroughType, self.Ptr))
        return ret


    @StrikethroughType.setter
    def StrikethroughType(self, value:str):
        GetDllLibXls().FontWrapper_set_StrikethroughType.argtypes=[c_void_p, c_wchar_p]
        CallCFunction(GetDllLibXls().FontWrapper_set_StrikethroughType, self.Ptr, value)

    @property
    def IsSubscript(self)->bool:
        """
    <summary>
        True if the font is formatted as subscript.
            False by default. Read / write Boolean.
    </summary>
        """
        GetDllLibXls().FontWrapper_get_IsSubscript.argtypes=[c_void_p]
        GetDllLibXls().FontWrapper_get_IsSubscript.restype=c_bool
        ret = CallCFunction(GetDllLibXls().FontWrapper_get_IsSubscript, self.Ptr)
        return ret

    @IsSubscript.setter
    def IsSubscript(self, value:bool):
        GetDllLibXls().FontWrapper_set_IsSubscript.argtypes=[c_void_p, c_bool]
        CallCFunction(GetDllLibXls().FontWrapper_set_IsSubscript, self.Ptr, value)

    @property
    def IsSuperscript(self)->bool:
        """
    <summary>
        True if the font is formatted as superscript. False by default.
            Read/write Boolean
    </summary>
        """
        GetDllLibXls().FontWrapper_get_IsSuperscript.argtypes=[c_void_p]
        GetDllLibXls().FontWrapper_get_IsSuperscript.restype=c_bool
        ret = CallCFunction(GetDllLibXls().FontWrapper_get_IsSuperscript, self.Ptr)
        return ret

    @IsSuperscript.setter
    def IsSuperscript(self, value:bool):
        GetDllLibXls().FontWrapper_set_IsSuperscript.argtypes=[c_void_p, c_bool]
        CallCFunction(GetDllLibXls().FontWrapper_set_IsSuperscript, self.Ptr, value)

    @property

    def Underline(self)->'FontUnderlineType':
        """
    <summary>
        Returns or sets the type of underline applied to the font. 
    </summary>
        """
        GetDllLibXls().FontWrapper_get_Underline.argtypes=[c_void_p]
        GetDllLibXls().FontWrapper_get_Underline.restype=c_int
        ret = CallCFunction(GetDllLibXls().FontWrapper_get_Underline, self.Ptr)
        objwraped = FontUnderlineType(ret)
        return objwraped

    @Underline.setter
    def Underline(self, value:'FontUnderlineType'):
        GetDllLibXls().FontWrapper_set_Underline.argtypes=[c_void_p, c_int]
        CallCFunction(GetDllLibXls().FontWrapper_set_Underline, self.Ptr, value.value)

    @property

    def FontName(self)->str:
        """
    <summary>
        Returns or sets the font name. Read / write string.
    </summary>
        """
        GetDllLibXls().FontWrapper_get_FontName.argtypes=[c_void_p]
        GetDllLibXls().FontWrapper_get_FontName.restype=c_void_p
        ret = PtrToStr(CallCFunction(GetDllLibXls().FontWrapper_get_FontName, self.Ptr))
        return ret


    @FontName.setter
    def FontName(self, value:str):
        GetDllLibXls().FontWrapper_set_FontName.argtypes=[c_void_p, c_wchar_p]
        CallCFunction(GetDllLibXls().FontWrapper_set_FontName, self.Ptr, value)

    @property

    def VerticalAlignment(self)->'FontVertialAlignmentType':
        """

        """
        GetDllLibXls().FontWrapper_get_VerticalAlignment.argtypes=[c_void_p]
        GetDllLibXls().FontWrapper_get_VerticalAlignment.restype=c_int
        ret = CallCFunction(GetDllLibXls().FontWrapper_get_VerticalAlignment, self.Ptr)
        objwraped = FontVertialAlignmentType(ret)
        return objwraped

    @VerticalAlignment.setter
    def VerticalAlignment(self, value:'FontVertialAlignmentType'):
        GetDllLibXls().FontWrapper_set_VerticalAlignment.argtypes=[c_void_p, c_int]
        CallCFunction(GetDllLibXls().FontWrapper_set_VerticalAlignment, self.Ptr, value.value)


    def GenerateNativeFont(self)->'Font':
        """

        """
        GetDllLibXls().FontWrapper_GenerateNativeFont.argtypes=[c_void_p]
        GetDllLibXls().FontWrapper_GenerateNativeFont.restype=c_void_p
        intPtr = CallCFunction(GetDllLibXls().FontWrapper_GenerateNativeFont, self.Ptr)
        ret = None if intPtr==None else Font(intPtr)
        return ret


    @property
    def IsAutoColor(self)->bool:
        """

        """
        GetDllLibXls().FontWrapper_get_IsAutoColor.argtypes=[c_void_p]
        GetDllLibXls().FontWrapper_get_IsAutoColor.restype=c_bool
        ret = CallCFunction(GetDllLibXls().FontWrapper_get_IsAutoColor, self.Ptr)
        return ret

    @property
    def Index(self)->int:
        """
    <summary>
        Returns index of the font. Read-only.
    </summary>
        """
        GetDllLibXls().FontWrapper_get_Index.argtypes=[c_void_p]
        GetDllLibXls().FontWrapper_get_Index.restype=c_int
        ret = CallCFunction(GetDllLibXls().FontWrapper_get_Index, self.Ptr)
        return ret

    @property

    def Font(self)->'XlsFont':
        """
    <summary>
        Returns internal font.
    </summary>
        """
        GetDllLibXls().FontWrapper_get_Font.argtypes=[c_void_p]
        GetDllLibXls().FontWrapper_get_Font.restype=c_void_p
        intPtr = CallCFunction(GetDllLibXls().FontWrapper_get_Font, self.Ptr)
        ret = None if intPtr==None else XlsFont(intPtr)
        return ret


    @property
    def FontIndex(self)->int:
        """

        """
        GetDllLibXls().FontWrapper_get_FontIndex.argtypes=[c_void_p]
        GetDllLibXls().FontWrapper_get_FontIndex.restype=c_int
        ret = CallCFunction(GetDllLibXls().FontWrapper_get_FontIndex, self.Ptr)
        return ret

    @property
    def IsReadOnly(self)->bool:
        """
    <summary>
        Indicates whether font is read-only.
    </summary>
        """
        GetDllLibXls().FontWrapper_get_IsReadOnly.argtypes=[c_void_p]
        GetDllLibXls().FontWrapper_get_IsReadOnly.restype=c_bool
        ret = CallCFunction(GetDllLibXls().FontWrapper_get_IsReadOnly, self.Ptr)
        return ret

    @IsReadOnly.setter
    def IsReadOnly(self, value:bool):
        GetDllLibXls().FontWrapper_set_IsReadOnly.argtypes=[c_void_p, c_bool]
        CallCFunction(GetDllLibXls().FontWrapper_set_IsReadOnly, self.Ptr, value)

    @property

    def Workbook(self)->'XlsWorkbook':
        """
    <summary>
        Returns workbook.
    </summary>
        """
        GetDllLibXls().FontWrapper_get_Workbook.argtypes=[c_void_p]
        GetDllLibXls().FontWrapper_get_Workbook.restype=c_void_p
        intPtr = CallCFunction(GetDllLibXls().FontWrapper_get_Workbook, self.Ptr)
        ret = None if intPtr==None else XlsWorkbook(intPtr)
        return ret


    def ColorObjectUpdate(self):
        """

        """
        GetDllLibXls().FontWrapper_ColorObjectUpdate.argtypes=[c_void_p]
        CallCFunction(GetDllLibXls().FontWrapper_ColorObjectUpdate, self.Ptr)


    def Clone(self ,book:'XlsWorkbook',parent:'SpireObject',dicFontIndexes:'IDictionary')->'FontWrapper':
        """

        """
        intPtrbook:c_void_p = book.Ptr
        intPtrparent:c_void_p = parent.Ptr
        intPtrdicFontIndexes:c_void_p = dicFontIndexes.Ptr

        GetDllLibXls().FontWrapper_Clone.argtypes=[c_void_p ,c_void_p,c_void_p,c_void_p]
        GetDllLibXls().FontWrapper_Clone.restype=c_void_p
        intPtr = CallCFunction(GetDllLibXls().FontWrapper_Clone, self.Ptr, intPtrbook,intPtrparent,intPtrdicFontIndexes)
        ret = None if intPtr==None else FontWrapper(intPtr)
        return ret


