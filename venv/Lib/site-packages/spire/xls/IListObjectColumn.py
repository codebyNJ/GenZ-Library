from enum import Enum
from plum import dispatch
from typing import TypeVar,Union,Generic,List,Tuple
from spire.xls.common import *
from spire.xls import *
from ctypes import *
import abc

class IListObjectColumn (SpireObject) :
    """
    <summary>
        Represents a column in the table.
    </summary>
    """
    @property

    def Name(self)->str:
        """
    <summary>
        Gets or sets name of the column.
            <example>The following code illustrates how create table using the data in the range 
            "A1:C6" and print first column's name,id and index:
            <code>
        //Create worksheet
        Workbook workbook = new Workbook();
        workbook.LoadFromFile("Sample.xlsx");
        Worksheet worksheet = workbook.Worksheets[0];
        //Create table
        IListObject table1 = worksheet.ListObjects.Create("Table1", worksheet["A1:C6"]);
        //Print Column Name, ID, Index
        Console.WriteLine("Column Name " + table1.Columns[0].Name);
        Console.WriteLine("Column ID " + table1.Columns[0].Id);
        Console.WriteLine("Column Index " + table1.Columns[0].Index);
        //Save to file
        workbook.SaveToFile("Table.xlsx");
        </code>
        </example>
    </summary>
        """
        GetDllLibXls().IListObjectColumn_get_Name.argtypes=[c_void_p]
        GetDllLibXls().IListObjectColumn_get_Name.restype=c_void_p
        ret = PtrToStr(CallCFunction(GetDllLibXls().IListObjectColumn_get_Name, self.Ptr))
        return ret


    @Name.setter
    def Name(self, value:str):
        GetDllLibXls().IListObjectColumn_set_Name.argtypes=[c_void_p, c_wchar_p]
        CallCFunction(GetDllLibXls().IListObjectColumn_set_Name, self.Ptr, value)

    @property
    def Index(self)->int:
        """
    <summary>
        Gets column index.
            <example>The following code illustrates how create table using the data in the range 
            "A1:C6" and print first column's name,id and index:
            <code>
        //Create worksheet
        Workbook workbook = new Workbook();
        workbook.LoadFromFile("Sample.xlsx");
        Worksheet worksheet = workbook.Worksheets[0];
        //Create table
        IListObject table1 = worksheet.ListObjects.Create("Table1", worksheet["A1:C6"]);
        //Print Column Name, ID, Index
        Console.WriteLine("Column Name " + table1.Columns[0].Name);
        Console.WriteLine("Column ID " + table1.Columns[0].Id);
        Console.WriteLine("Column Index " + table1.Columns[0].Index);
        //Save to file
        workbook.SaveToFile("Table.xlsx");
        </code>
        </example>
    </summary>
        """
        GetDllLibXls().IListObjectColumn_get_Index.argtypes=[c_void_p]
        GetDllLibXls().IListObjectColumn_get_Index.restype=c_int
        ret = CallCFunction(GetDllLibXls().IListObjectColumn_get_Index, self.Ptr)
        return ret

    @property
    def Id(self)->int:
        """
    <summary>
        Gets column id of current column. Read-only.
            <example>The following code illustrates how create table using the data in the range 
            "A1:C6" and print first column's name,id and index:
            <code>
        //Create worksheet
        Workbook workbook = new Workbook();
        workbook.LoadFromFile("Sample.xlsx");
        Worksheet worksheet = workbook.Worksheets[0];
        //Create table
        IListObject table1 = worksheet.ListObjects.Create("Table1", worksheet["A1:C6"]);
        //Print Column Name, ID, Index
        Console.WriteLine("Column Name " + table1.Columns[0].Name);
        Console.WriteLine("Column ID " + table1.Columns[0].Id);
        Console.WriteLine("Column Index " + table1.Columns[0].Index);
        //Save to file
        workbook.SaveToFile("Table.xlsx");
        </code>
        </example>
    </summary>
        """
        GetDllLibXls().IListObjectColumn_get_Id.argtypes=[c_void_p]
        GetDllLibXls().IListObjectColumn_get_Id.restype=c_int
        ret = CallCFunction(GetDllLibXls().IListObjectColumn_get_Id, self.Ptr)
        return ret

    @property

    def TotalsCalculation(self)->'ExcelTotalsCalculation':
        """
    <summary>
        Gets or sets function used for totals calculation.
            <example>The following code illustrates how to set IListObject.ShowTotals to "True" to 
            enable totals and set ExcelTotalsCalculation.Sum for second and third columns to get sum 
            of values in the respective columns:
            <code>
        //Create worksheet
        Workbook workbook = new Workbook();
        workbook.LoadFromFile("Sample.xlsx");
        Worksheet worksheet = workbook.Worksheets[0];
        //Create table
        IListObject table1 = worksheet.ListObjects.Create("Table1", worksheet["A1:C6"]);
        //Total row
        table1.ShowTotals = true;
        table1.Columns[0].TotalsRowLabel = "Total";
        table1.Columns[1].TotalsCalculation = ExcelTotalsCalculation.Sum;
        table1.Columns[2].TotalsCalculation = ExcelTotalsCalculation.Sum;
        //Save to file
        workbook.SaveToFile("Table.xlsx");
        </code>
        </example>
    </summary>
        """
        GetDllLibXls().IListObjectColumn_get_TotalsCalculation.argtypes=[c_void_p]
        GetDllLibXls().IListObjectColumn_get_TotalsCalculation.restype=c_int
        ret = CallCFunction(GetDllLibXls().IListObjectColumn_get_TotalsCalculation, self.Ptr)
        objwraped = ExcelTotalsCalculation(ret)
        return objwraped

    @TotalsCalculation.setter
    def TotalsCalculation(self, value:'ExcelTotalsCalculation'):
        GetDllLibXls().IListObjectColumn_set_TotalsCalculation.argtypes=[c_void_p, c_int]
        CallCFunction(GetDllLibXls().IListObjectColumn_set_TotalsCalculation, self.Ptr, value.value)

    @property

    def TotalsRowLabel(self)->str:
        """
    <summary>
        Gets or sets label of the totals row.
            <example>The following code illustrates how to set a string "Total" to the first column's 
            TotalsRowLabel property to indicate that it's adjacent cell holds sum of the values of it's column:
            <code>
        //Create worksheet
        Workbook workbook = new Workbook();
        workbook.LoadFromFile("Sample.xlsx");
        Worksheet worksheet = workbook.Worksheets[0];
        //Create table
        IListObject table1 = worksheet.ListObjects.Create("Table1", worksheet["A1:C6"]);
        //Total row
        table1.ShowTotals = true;
        table1.Columns[0].TotalsRowLabel = "Total";
        table1.Columns[1].TotalsCalculation = ExcelTotalsCalculation.Sum;
        table1.Columns[2].TotalsCalculation = ExcelTotalsCalculation.Sum;
        //Save to file
        workbook.SaveToFile("Table.xlsx");
        </code>
        </example>
    </summary>
        """
        GetDllLibXls().IListObjectColumn_get_TotalsRowLabel.argtypes=[c_void_p]
        GetDllLibXls().IListObjectColumn_get_TotalsRowLabel.restype=c_void_p
        ret = PtrToStr(CallCFunction(GetDllLibXls().IListObjectColumn_get_TotalsRowLabel, self.Ptr))
        return ret


    @TotalsRowLabel.setter
    def TotalsRowLabel(self, value:str):
        GetDllLibXls().IListObjectColumn_set_TotalsRowLabel.argtypes=[c_void_p, c_wchar_p]
        CallCFunction(GetDllLibXls().IListObjectColumn_set_TotalsRowLabel, self.Ptr, value)

    @property

    def CalculatedFormula(self)->str:
        """
    <summary>
        Gets or sets calculated formula value.
            <example>The following code illustrates how to set a formula to third column to hold the 
            sum of first and second column's data:
            <code>
        //Create worksheet
        Workbook workbook = new Workbook();
        workbook.LoadFromFile("Sample.xlsx");
        Worksheet worksheet = workbook.Worksheets[0];
        //Create table
        IListObject table1 = worksheet.ListObjects.Create("Table1", worksheet["A1:C6"]);
        //Total row
        table1.ShowTotals = true;
        table1.Columns[0].TotalsRowLabel = "Total";
        table1.Columns[1].TotalsCalculation = ExcelTotalsCalculation.Sum;
        table1.Columns[2].TotalsCalculation = ExcelTotalsCalculation.Sum;
        //Save to file
        workbook.SaveToFile("Table.xlsx");
        </code>
        </example>
    </summary>
        """
        GetDllLibXls().IListObjectColumn_get_CalculatedFormula.argtypes=[c_void_p]
        GetDllLibXls().IListObjectColumn_get_CalculatedFormula.restype=c_void_p
        ret = PtrToStr(CallCFunction(GetDllLibXls().IListObjectColumn_get_CalculatedFormula, self.Ptr))
        return ret


    @CalculatedFormula.setter
    def CalculatedFormula(self, value:str):
        GetDllLibXls().IListObjectColumn_set_CalculatedFormula.argtypes=[c_void_p, c_wchar_p]
        CallCFunction(GetDllLibXls().IListObjectColumn_set_CalculatedFormula, self.Ptr, value)

class ListObjectColumns (IList[IListObjectColumn]):
    pass
