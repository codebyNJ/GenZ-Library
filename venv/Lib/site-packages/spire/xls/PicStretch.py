from enum import Enum
from plum import dispatch
from typing import TypeVar,Union,Generic,List,Tuple
from spire.xls.common import *
from spire.xls import *
from ctypes import *
import abc

class PicStretch (SpireObject) :
    """

    """
    @property

    def Type(self)->'FillPictureType':
        """

        """
        GetDllLibXls().PicStretch_get_Type.argtypes=[c_void_p]
        GetDllLibXls().PicStretch_get_Type.restype=c_int
        ret = CallCFunction(GetDllLibXls().PicStretch_get_Type, self.Ptr)
        objwraped = FillPictureType(ret)
        return objwraped

    @Type.setter
    def Type(self, value:'FillPictureType'):
        GetDllLibXls().PicStretch_set_Type.argtypes=[c_void_p, c_int]
        CallCFunction(GetDllLibXls().PicStretch_set_Type, self.Ptr, value.value)

    @property
    def Scale(self)->float:
        """

        """
        GetDllLibXls().PicStretch_get_Scale.argtypes=[c_void_p]
        GetDllLibXls().PicStretch_get_Scale.restype=c_double
        ret = CallCFunction(GetDllLibXls().PicStretch_get_Scale, self.Ptr)
        return ret

    @Scale.setter
    def Scale(self, value:float):
        GetDllLibXls().PicStretch_set_Scale.argtypes=[c_void_p, c_double]
        CallCFunction(GetDllLibXls().PicStretch_set_Scale, self.Ptr, value)

    @property
    def Left(self)->float:
        """

        """
        GetDllLibXls().PicStretch_get_Left.argtypes=[c_void_p]
        GetDllLibXls().PicStretch_get_Left.restype=c_double
        ret = CallCFunction(GetDllLibXls().PicStretch_get_Left, self.Ptr)
        return ret

    @Left.setter
    def Left(self, value:float):
        GetDllLibXls().PicStretch_set_Left.argtypes=[c_void_p, c_double]
        CallCFunction(GetDllLibXls().PicStretch_set_Left, self.Ptr, value)

    @property
    def Top(self)->float:
        """

        """
        GetDllLibXls().PicStretch_get_Top.argtypes=[c_void_p]
        GetDllLibXls().PicStretch_get_Top.restype=c_double
        ret = CallCFunction(GetDllLibXls().PicStretch_get_Top, self.Ptr)
        return ret

    @Top.setter
    def Top(self, value:float):
        GetDllLibXls().PicStretch_set_Top.argtypes=[c_void_p, c_double]
        CallCFunction(GetDllLibXls().PicStretch_set_Top, self.Ptr, value)

    @property
    def Bottom(self)->float:
        """

        """
        GetDllLibXls().PicStretch_get_Bottom.argtypes=[c_void_p]
        GetDllLibXls().PicStretch_get_Bottom.restype=c_double
        ret = CallCFunction(GetDllLibXls().PicStretch_get_Bottom, self.Ptr)
        return ret

    @Bottom.setter
    def Bottom(self, value:float):
        GetDllLibXls().PicStretch_set_Bottom.argtypes=[c_void_p, c_double]
        CallCFunction(GetDllLibXls().PicStretch_set_Bottom, self.Ptr, value)

    @property
    def Right(self)->float:
        """

        """
        GetDllLibXls().PicStretch_get_Right.argtypes=[c_void_p]
        GetDllLibXls().PicStretch_get_Right.restype=c_double
        ret = CallCFunction(GetDllLibXls().PicStretch_get_Right, self.Ptr)
        return ret

    @Right.setter
    def Right(self, value:float):
        GetDllLibXls().PicStretch_set_Right.argtypes=[c_void_p, c_double]
        CallCFunction(GetDllLibXls().PicStretch_set_Right, self.Ptr, value)

