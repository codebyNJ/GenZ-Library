from enum import Enum
from plum import dispatch
from typing import TypeVar,Union,Generic,List,Tuple
from spire.xls.common import *
from spire.xls import *
from ctypes import *
import abc

class RichTextString (  CommonWrapper, IRichTextString, IExcelApplication) :
    """

    """
    @property

    def Parent(self)->'SpireObject':
        """
    <summary>
        Returns parent object. Read-only.
    </summary>
        """
        GetDllLibXls().RichTextString_get_Parent.argtypes=[c_void_p]
        GetDllLibXls().RichTextString_get_Parent.restype=c_void_p
        intPtr = CallCFunction(GetDllLibXls().RichTextString_get_Parent, self.Ptr)
        ret = None if intPtr==None else SpireObject(intPtr)
        return ret



    def GetFont(self ,index:int)->'IFont':
        """

        """
        
        GetDllLibXls().RichTextString_GetFont.argtypes=[c_void_p ,c_int]
        GetDllLibXls().RichTextString_GetFont.restype=c_void_p
        intPtr = CallCFunction(GetDllLibXls().RichTextString_GetFont, self.Ptr, index)
        ret = None if intPtr==None else FontWrapper(intPtr)
        return ret



    def SetFont(self ,startIndex:int,endIndex:int,font:'IFont'):
        """

        """
        intPtrfont:c_void_p = font.Ptr

        GetDllLibXls().RichTextString_SetFont.argtypes=[c_void_p ,c_int,c_int,c_void_p]
        CallCFunction(GetDllLibXls().RichTextString_SetFont, self.Ptr, startIndex,endIndex,intPtrfont)

    def ClearFormatting(self):
        """

        """
        GetDllLibXls().RichTextString_ClearFormatting.argtypes=[c_void_p]
        CallCFunction(GetDllLibXls().RichTextString_ClearFormatting, self.Ptr)

    def Clear(self):
        """

        """
        GetDllLibXls().RichTextString_Clear.argtypes=[c_void_p]
        CallCFunction(GetDllLibXls().RichTextString_Clear, self.Ptr)


    def Append(self ,text:str,font:'IFont'):
        """

        """
        intPtrfont:c_void_p = font.Ptr

        GetDllLibXls().RichTextString_Append.argtypes=[c_void_p ,c_void_p,c_void_p]
        CallCFunction(GetDllLibXls().RichTextString_Append, self.Ptr, text,intPtrfont)

    @property

    def Text(self)->str:
        """

        """
        GetDllLibXls().RichTextString_get_Text.argtypes=[c_void_p]
        GetDllLibXls().RichTextString_get_Text.restype=c_void_p
        ret = PtrToStr(CallCFunction(GetDllLibXls().RichTextString_get_Text, self.Ptr))
        return ret


    @Text.setter
    def Text(self, value:str):
        GetDllLibXls().RichTextString_set_Text.argtypes=[c_void_p, c_wchar_p]
        CallCFunction(GetDllLibXls().RichTextString_set_Text, self.Ptr, value)

    @property

    def RtfText(self)->str:
        """

        """
        GetDllLibXls().RichTextString_get_RtfText.argtypes=[c_void_p]
        GetDllLibXls().RichTextString_get_RtfText.restype=c_void_p
        ret = PtrToStr(CallCFunction(GetDllLibXls().RichTextString_get_RtfText, self.Ptr))
        return ret


    @property
    def IsFormatted(self)->bool:
        """

        """
        GetDllLibXls().RichTextString_get_IsFormatted.argtypes=[c_void_p]
        GetDllLibXls().RichTextString_get_IsFormatted.restype=c_bool
        ret = CallCFunction(GetDllLibXls().RichTextString_get_IsFormatted, self.Ptr)
        return ret

    @property

    def DefaultFont(self)->'XlsFont':
        """

        """
        GetDllLibXls().RichTextString_get_DefaultFont.argtypes=[c_void_p]
        GetDllLibXls().RichTextString_get_DefaultFont.restype=c_void_p
        intPtr = CallCFunction(GetDllLibXls().RichTextString_get_DefaultFont, self.Ptr)
        ret = None if intPtr==None else XlsFont(intPtr)
        return ret


