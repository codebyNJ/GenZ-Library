from enum import Enum
from plum import dispatch
from typing import TypeVar,Union,Generic,List,Tuple
from spire.xls.common import *
from spire.xls import *
from ctypes import *
import abc

class XlsEventArgs (SpireObject) :
    """
    <summary>
        Class used as message sender on Property value change. Class provides old and
            new values which allow user to create advanced logic.
    </summary>
    """
    @property

    def newValue(self)->'SpireObject':
        """
    <summary>
        New property value.Read-only.
    </summary>
        """
        GetDllLibXls().XlsEventArgs_get_newValue.argtypes=[c_void_p]
        GetDllLibXls().XlsEventArgs_get_newValue.restype=c_void_p
        intPtr = CallCFunction(GetDllLibXls().XlsEventArgs_get_newValue, self.Ptr)
        ret = None if intPtr==None else SpireObject(intPtr)
        return ret


    @property

    def oldValue(self)->'SpireObject':
        """
    <summary>
        Old property value. Read-only.
    </summary>
        """
        GetDllLibXls().XlsEventArgs_get_oldValue.argtypes=[c_void_p]
        GetDllLibXls().XlsEventArgs_get_oldValue.restype=c_void_p
        intPtr = CallCFunction(GetDllLibXls().XlsEventArgs_get_oldValue, self.Ptr)
        ret = None if intPtr==None else SpireObject(intPtr)
        return ret


    @property

    def Name(self)->str:
        """
    <summary>
        Name of the property. Read-only.
    </summary>
        """
        GetDllLibXls().XlsEventArgs_get_Name.argtypes=[c_void_p]
        GetDllLibXls().XlsEventArgs_get_Name.restype=c_void_p
        ret = PtrToStr(CallCFunction(GetDllLibXls().XlsEventArgs_get_Name, self.Ptr))
        return ret


    @property

    def Next(self)->'XlsEventArgs':
        """
    <summary>
        If more than one property must be changed on one send message, 
            attach it to the ValueChangeEventArgs to create a one way directed list of property changes.
    </summary>
        """
        GetDllLibXls().XlsEventArgs_get_Next.argtypes=[c_void_p]
        GetDllLibXls().XlsEventArgs_get_Next.restype=c_void_p
        intPtr = CallCFunction(GetDllLibXls().XlsEventArgs_get_Next, self.Ptr)
        ret = None if intPtr==None else XlsEventArgs(intPtr)
        return ret


    @Next.setter
    def Next(self, value:'XlsEventArgs'):
        GetDllLibXls().XlsEventArgs_set_Next.argtypes=[c_void_p, c_void_p]
        CallCFunction(GetDllLibXls().XlsEventArgs_set_Next, self.Ptr, value.Ptr)

    @staticmethod

    def get_Empty()->'XlsEventArgs':
        """

        """
        #GetDllLibXls().XlsEventArgs_get_Empty.argtypes=[]
        GetDllLibXls().XlsEventArgs_get_Empty.restype=c_void_p
        intPtr = CallCFunction(GetDllLibXls().XlsEventArgs_get_Empty)
        ret = None if intPtr==None else XlsEventArgs(intPtr)
        return ret


