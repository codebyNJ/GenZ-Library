from enum import Enum
from plum import dispatch
from typing import TypeVar,Union,Generic,List,Tuple
from spire.xls.common import *
from spire.xls import *
from ctypes import *
import abc

class XlsFill (SpireObject) :
    """

    """
    @property

    def OColor(self)->'OColor':
        """

        """
        GetDllLibXls().XlsFill_get_OColor.argtypes=[c_void_p]
        GetDllLibXls().XlsFill_get_OColor.restype=c_void_p
        intPtr = CallCFunction(GetDllLibXls().XlsFill_get_OColor, self.Ptr)
        ret = None if intPtr==None else OColor(intPtr)
        return ret


    @property

    def PatternColorObject(self)->'OColor':
        """

        """
        GetDllLibXls().XlsFill_get_PatternColorObject.argtypes=[c_void_p]
        GetDllLibXls().XlsFill_get_PatternColorObject.restype=c_void_p
        intPtr = CallCFunction(GetDllLibXls().XlsFill_get_PatternColorObject, self.Ptr)
        ret = None if intPtr==None else OColor(intPtr)
        return ret


    @property

    def Pattern(self)->'ExcelPatternType':
        """

        """
        GetDllLibXls().XlsFill_get_Pattern.argtypes=[c_void_p]
        GetDllLibXls().XlsFill_get_Pattern.restype=c_int
        ret = CallCFunction(GetDllLibXls().XlsFill_get_Pattern, self.Ptr)
        objwraped = ExcelPatternType(ret)
        return objwraped

    @Pattern.setter
    def Pattern(self, value:'ExcelPatternType'):
        GetDllLibXls().XlsFill_set_Pattern.argtypes=[c_void_p, c_int]
        CallCFunction(GetDllLibXls().XlsFill_set_Pattern, self.Ptr, value.value)

    @property

    def GradientStyle(self)->'GradientStyleType':
        """

        """
        GetDllLibXls().XlsFill_get_GradientStyle.argtypes=[c_void_p]
        GetDllLibXls().XlsFill_get_GradientStyle.restype=c_int
        ret = CallCFunction(GetDllLibXls().XlsFill_get_GradientStyle, self.Ptr)
        objwraped = GradientStyleType(ret)
        return objwraped

    @GradientStyle.setter
    def GradientStyle(self, value:'GradientStyleType'):
        GetDllLibXls().XlsFill_set_GradientStyle.argtypes=[c_void_p, c_int]
        CallCFunction(GetDllLibXls().XlsFill_set_GradientStyle, self.Ptr, value.value)

    @property

    def GradientVariant(self)->'GradientVariantsType':
        """

        """
        GetDllLibXls().XlsFill_get_GradientVariant.argtypes=[c_void_p]
        GetDllLibXls().XlsFill_get_GradientVariant.restype=c_int
        ret = CallCFunction(GetDllLibXls().XlsFill_get_GradientVariant, self.Ptr)
        objwraped = GradientVariantsType(ret)
        return objwraped

    @GradientVariant.setter
    def GradientVariant(self, value:'GradientVariantsType'):
        GetDllLibXls().XlsFill_set_GradientVariant.argtypes=[c_void_p, c_int]
        CallCFunction(GetDllLibXls().XlsFill_set_GradientVariant, self.Ptr, value.value)

    @property

    def FillType(self)->'ShapeFillType':
        """

        """
        GetDllLibXls().XlsFill_get_FillType.argtypes=[c_void_p]
        GetDllLibXls().XlsFill_get_FillType.restype=c_int
        ret = CallCFunction(GetDllLibXls().XlsFill_get_FillType, self.Ptr)
        objwraped = ShapeFillType(ret)
        return objwraped

    @FillType.setter
    def FillType(self, value:'ShapeFillType'):
        GetDllLibXls().XlsFill_set_FillType.argtypes=[c_void_p, c_int]
        CallCFunction(GetDllLibXls().XlsFill_set_FillType, self.Ptr, value.value)


    def Equals(self ,obj:'SpireObject')->bool:
        """

        """
        intPtrobj:c_void_p = obj.Ptr

        GetDllLibXls().XlsFill_Equals.argtypes=[c_void_p ,c_void_p]
        GetDllLibXls().XlsFill_Equals.restype=c_bool
        ret = CallCFunction(GetDllLibXls().XlsFill_Equals, self.Ptr, intPtrobj)
        return ret

    def GetHashCode(self)->int:
        """

        """
        GetDllLibXls().XlsFill_GetHashCode.argtypes=[c_void_p]
        GetDllLibXls().XlsFill_GetHashCode.restype=c_int
        ret = CallCFunction(GetDllLibXls().XlsFill_GetHashCode, self.Ptr)
        return ret


    def Clone(self)->'XlsFill':
        """

        """
        GetDllLibXls().XlsFill_Clone.argtypes=[c_void_p]
        GetDllLibXls().XlsFill_Clone.restype=c_void_p
        intPtr = CallCFunction(GetDllLibXls().XlsFill_Clone, self.Ptr)
        ret = None if intPtr==None else XlsFill(intPtr)
        return ret


