from enum import Enum
from plum import dispatch
from typing import TypeVar,Union,Generic,List,Tuple
from spire.xls.common import *
from spire.xls import *
from ctypes import *
import abc

class XlsHyperLink (  XlsObject, IHyperLink, ICloneParent) :
    """

    """
    @property

    def Address(self)->str:
        """

        """
        GetDllLibXls().XlsHyperLink_get_Address.argtypes=[c_void_p]
        GetDllLibXls().XlsHyperLink_get_Address.restype=c_void_p
        ret = PtrToStr(CallCFunction(GetDllLibXls().XlsHyperLink_get_Address, self.Ptr))
        return ret


    @Address.setter
    def Address(self, value:str):
        GetDllLibXls().XlsHyperLink_set_Address.argtypes=[c_void_p, c_wchar_p]
        CallCFunction(GetDllLibXls().XlsHyperLink_set_Address, self.Ptr, value)

    @property

    def Name(self)->str:
        """

        """
        GetDllLibXls().XlsHyperLink_get_Name.argtypes=[c_void_p]
        GetDllLibXls().XlsHyperLink_get_Name.restype=c_void_p
        ret = PtrToStr(CallCFunction(GetDllLibXls().XlsHyperLink_get_Name, self.Ptr))
        return ret


    @property

    def Range(self)->'IXLSRange':
        """

        """
        from .XlsRange import XlsRange
        GetDllLibXls().XlsHyperLink_get_Range.argtypes=[c_void_p]
        GetDllLibXls().XlsHyperLink_get_Range.restype=c_void_p
        intPtr = CallCFunction(GetDllLibXls().XlsHyperLink_get_Range, self.Ptr)
        ret = None if intPtr==None else XlsRange(intPtr)
        return ret


    @Range.setter
    def Range(self, value:'IXLSRange'):
        GetDllLibXls().XlsHyperLink_set_Range.argtypes=[c_void_p, c_void_p]
        CallCFunction(GetDllLibXls().XlsHyperLink_set_Range, self.Ptr, value.Ptr)

    @property

    def ScreenTip(self)->str:
        """

        """
        GetDllLibXls().XlsHyperLink_get_ScreenTip.argtypes=[c_void_p]
        GetDllLibXls().XlsHyperLink_get_ScreenTip.restype=c_void_p
        ret = PtrToStr(CallCFunction(GetDllLibXls().XlsHyperLink_get_ScreenTip, self.Ptr))
        return ret


    @ScreenTip.setter
    def ScreenTip(self, value:str):
        GetDllLibXls().XlsHyperLink_set_ScreenTip.argtypes=[c_void_p, c_wchar_p]
        CallCFunction(GetDllLibXls().XlsHyperLink_set_ScreenTip, self.Ptr, value)

    @property

    def SubAddress(self)->str:
        """

        """
        GetDllLibXls().XlsHyperLink_get_SubAddress.argtypes=[c_void_p]
        GetDllLibXls().XlsHyperLink_get_SubAddress.restype=c_void_p
        ret = PtrToStr(CallCFunction(GetDllLibXls().XlsHyperLink_get_SubAddress, self.Ptr))
        return ret


    @SubAddress.setter
    def SubAddress(self, value:str):
        GetDllLibXls().XlsHyperLink_set_SubAddress.argtypes=[c_void_p, c_wchar_p]
        CallCFunction(GetDllLibXls().XlsHyperLink_set_SubAddress, self.Ptr, value)


    def SetAddress(self ,strAddress:str,bSetText:bool):
        """

        """
        
        GetDllLibXls().XlsHyperLink_SetAddress.argtypes=[c_void_p ,c_void_p,c_bool]
        CallCFunction(GetDllLibXls().XlsHyperLink_SetAddress, self.Ptr, strAddress,bSetText)


    def SetSubAddress(self ,strSubAddress:str):
        """

        """
        
        GetDllLibXls().XlsHyperLink_SetSubAddress.argtypes=[c_void_p ,c_void_p]
        CallCFunction(GetDllLibXls().XlsHyperLink_SetSubAddress, self.Ptr, strSubAddress)

    @property

    def TextToDisplay(self)->str:
        """
    <summary>
        Returns or sets the text to be displayed for the specified hyperlink.
            The default value is the address of the hyperlink.
    </summary>
        """
        GetDllLibXls().XlsHyperLink_get_TextToDisplay.argtypes=[c_void_p]
        GetDllLibXls().XlsHyperLink_get_TextToDisplay.restype=c_void_p
        ret = PtrToStr(CallCFunction(GetDllLibXls().XlsHyperLink_get_TextToDisplay, self.Ptr))
        return ret


    @TextToDisplay.setter
    def TextToDisplay(self, value:str):
        GetDllLibXls().XlsHyperLink_set_TextToDisplay.argtypes=[c_void_p, c_wchar_p]
        CallCFunction(GetDllLibXls().XlsHyperLink_set_TextToDisplay, self.Ptr, value)

    @property

    def Type(self)->'HyperLinkType':
        """

        """
        GetDllLibXls().XlsHyperLink_get_Type.argtypes=[c_void_p]
        GetDllLibXls().XlsHyperLink_get_Type.restype=c_int
        ret = CallCFunction(GetDllLibXls().XlsHyperLink_get_Type, self.Ptr)
        objwraped = HyperLinkType(ret)
        return objwraped

    @Type.setter
    def Type(self, value:'HyperLinkType'):
        GetDllLibXls().XlsHyperLink_set_Type.argtypes=[c_void_p, c_int]
        CallCFunction(GetDllLibXls().XlsHyperLink_set_Type, self.Ptr, value.value)

    @property
    def FirstRow(self)->int:
        """

        """
        GetDllLibXls().XlsHyperLink_get_FirstRow.argtypes=[c_void_p]
        GetDllLibXls().XlsHyperLink_get_FirstRow.restype=c_int
        ret = CallCFunction(GetDllLibXls().XlsHyperLink_get_FirstRow, self.Ptr)
        return ret

    @property
    def FirstColumn(self)->int:
        """

        """
        GetDllLibXls().XlsHyperLink_get_FirstColumn.argtypes=[c_void_p]
        GetDllLibXls().XlsHyperLink_get_FirstColumn.restype=c_int
        ret = CallCFunction(GetDllLibXls().XlsHyperLink_get_FirstColumn, self.Ptr)
        return ret

    @property
    def LastRow(self)->int:
        """

        """
        GetDllLibXls().XlsHyperLink_get_LastRow.argtypes=[c_void_p]
        GetDllLibXls().XlsHyperLink_get_LastRow.restype=c_int
        ret = CallCFunction(GetDllLibXls().XlsHyperLink_get_LastRow, self.Ptr)
        return ret

    @property

    def UnicodePath(self)->str:
        """
    <summary>
        Gets/sets an optional string of Unicode characters
            that specifies the complete file path.
            When the property Type is not HyperLinkType.File,
            this property is invalid.
    </summary>
        """
        GetDllLibXls().XlsHyperLink_get_UnicodePath.argtypes=[c_void_p]
        GetDllLibXls().XlsHyperLink_get_UnicodePath.restype=c_void_p
        ret = PtrToStr(CallCFunction(GetDllLibXls().XlsHyperLink_get_UnicodePath, self.Ptr))
        return ret


    @UnicodePath.setter
    def UnicodePath(self, value:str):
        GetDllLibXls().XlsHyperLink_set_UnicodePath.argtypes=[c_void_p, c_wchar_p]
        CallCFunction(GetDllLibXls().XlsHyperLink_set_UnicodePath, self.Ptr, value)

    @property
    def LastColumn(self)->int:
        """

        """
        GetDllLibXls().XlsHyperLink_get_LastColumn.argtypes=[c_void_p]
        GetDllLibXls().XlsHyperLink_get_LastColumn.restype=c_int
        ret = CallCFunction(GetDllLibXls().XlsHyperLink_get_LastColumn, self.Ptr)
        return ret


    def Clone(self ,parent:'SpireObject')->'SpireObject':
        """
    <summary>
        Creates a new object that is a copy of the current instance.
    </summary>
    <param name="parent">Parent object for a copy of this instance.</param>
    <returns>A new object that is a copy of this instance.</returns>
        """
        intPtrparent:c_void_p = parent.Ptr

        GetDllLibXls().XlsHyperLink_Clone.argtypes=[c_void_p ,c_void_p]
        GetDllLibXls().XlsHyperLink_Clone.restype=c_void_p
        intPtr = CallCFunction(GetDllLibXls().XlsHyperLink_Clone, self.Ptr, intPtrparent)
        ret = None if intPtr==None else SpireObject(intPtr)
        return ret


