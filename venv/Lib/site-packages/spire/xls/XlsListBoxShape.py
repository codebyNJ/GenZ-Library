from enum import Enum
from plum import dispatch
from typing import TypeVar,Union,Generic,List,Tuple
from spire.xls.common import *
from spire.xls import *
from ctypes import *
import abc

class XlsListBoxShape (  XlsShape, IListBox) :
    """

    """
    @property
    def Display3DShading(self)->bool:
        """

        """
        GetDllLibXls().XlsListBoxShape_get_Display3DShading.argtypes=[c_void_p]
        GetDllLibXls().XlsListBoxShape_get_Display3DShading.restype=c_bool
        ret = CallCFunction(GetDllLibXls().XlsListBoxShape_get_Display3DShading, self.Ptr)
        return ret

    @Display3DShading.setter
    def Display3DShading(self, value:bool):
        GetDllLibXls().XlsListBoxShape_set_Display3DShading.argtypes=[c_void_p, c_bool]
        CallCFunction(GetDllLibXls().XlsListBoxShape_set_Display3DShading, self.Ptr, value)

    @property

    def LinkedCell(self)->'IXLSRange':
        """

        """
        GetDllLibXls().XlsListBoxShape_get_LinkedCell.argtypes=[c_void_p]
        GetDllLibXls().XlsListBoxShape_get_LinkedCell.restype=c_void_p
        intPtr = CallCFunction(GetDllLibXls().XlsListBoxShape_get_LinkedCell, self.Ptr)
        ret = None if intPtr==None else XlsRange(intPtr)
        return ret


    @LinkedCell.setter
    def LinkedCell(self, value:'IXLSRange'):
        GetDllLibXls().XlsListBoxShape_set_LinkedCell.argtypes=[c_void_p, c_void_p]
        CallCFunction(GetDllLibXls().XlsListBoxShape_set_LinkedCell, self.Ptr, value.Ptr)

    @property

    def ListFillRange(self)->'IXLSRange':
        """

        """
        GetDllLibXls().XlsListBoxShape_get_ListFillRange.argtypes=[c_void_p]
        GetDllLibXls().XlsListBoxShape_get_ListFillRange.restype=c_void_p
        intPtr = CallCFunction(GetDllLibXls().XlsListBoxShape_get_ListFillRange, self.Ptr)
        ret = None if intPtr==None else XlsRange(intPtr)
        return ret


    @ListFillRange.setter
    def ListFillRange(self, value:'IXLSRange'):
        GetDllLibXls().XlsListBoxShape_set_ListFillRange.argtypes=[c_void_p, c_void_p]
        CallCFunction(GetDllLibXls().XlsListBoxShape_set_ListFillRange, self.Ptr, value.Ptr)

    @property
    def SelectedIndex(self)->int:
        """

        """
        GetDllLibXls().XlsListBoxShape_get_SelectedIndex.argtypes=[c_void_p]
        GetDllLibXls().XlsListBoxShape_get_SelectedIndex.restype=c_int
        ret = CallCFunction(GetDllLibXls().XlsListBoxShape_get_SelectedIndex, self.Ptr)
        return ret

    @SelectedIndex.setter
    def SelectedIndex(self, value:int):
        GetDllLibXls().XlsListBoxShape_set_SelectedIndex.argtypes=[c_void_p, c_int]
        CallCFunction(GetDllLibXls().XlsListBoxShape_set_SelectedIndex, self.Ptr, value)

    @property

    def SelectionType(self)->'SelectionType':
        """

        """
        GetDllLibXls().XlsListBoxShape_get_SelectionType.argtypes=[c_void_p]
        GetDllLibXls().XlsListBoxShape_get_SelectionType.restype=c_int
        ret = CallCFunction(GetDllLibXls().XlsListBoxShape_get_SelectionType, self.Ptr)
        objwraped = SelectionType(ret)
        return objwraped

    @SelectionType.setter
    def SelectionType(self, value:'SelectionType'):
        GetDllLibXls().XlsListBoxShape_set_SelectionType.argtypes=[c_void_p, c_int]
        CallCFunction(GetDllLibXls().XlsListBoxShape_set_SelectionType, self.Ptr, value.value)

    @property

    def ShapeType(self)->'ExcelShapeType':
        """

        """
        GetDllLibXls().XlsListBoxShape_get_ShapeType.argtypes=[c_void_p]
        GetDllLibXls().XlsListBoxShape_get_ShapeType.restype=c_int
        ret = CallCFunction(GetDllLibXls().XlsListBoxShape_get_ShapeType, self.Ptr)
        objwraped = ExcelShapeType(ret)
        return objwraped

#
#    def Clone(self ,parent:'SpireObject',hashNewNames:'Dictionary2',dicFontIndexes:'Dictionary2',addToCollections:bool)->'IShape':
#        """
#
#        """
#        intPtrparent:c_void_p = parent.Ptr
#        intPtrhashNewNames:c_void_p = hashNewNames.Ptr
#        intPtrdicFontIndexes:c_void_p = dicFontIndexes.Ptr
#
#        GetDllLibXls().XlsListBoxShape_Clone.argtypes=[c_void_p ,c_void_p,c_void_p,c_void_p,c_bool]
#        GetDllLibXls().XlsListBoxShape_Clone.restype=c_void_p
#        intPtr = CallCFunction(GetDllLibXls().XlsListBoxShape_Clone, self.Ptr, intPtrparent,intPtrhashNewNames,intPtrdicFontIndexes,addToCollections)
#        ret = None if intPtr==None else IShape(intPtr)
#        return ret
#


