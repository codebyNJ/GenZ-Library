from enum import Enum
from plum import dispatch
from typing import TypeVar,Union,Generic,List,Tuple
from spire.xls.common import *
from spire.xls import *
from ctypes import *
import abc

class XlsShapeFill (  XlsObject, IShapeFill) :
    """

    """
    @property

    def GradientStops(self)->'GradientStops':
        """

        """
        GetDllLibXls().XlsShapeFill_get_GradientStops.argtypes=[c_void_p]
        GetDllLibXls().XlsShapeFill_get_GradientStops.restype=c_void_p
        intPtr = CallCFunction(GetDllLibXls().XlsShapeFill_get_GradientStops, self.Ptr)
        ret = None if intPtr==None else GradientStops(intPtr)
        return ret


    @property

    def FillType(self)->'ShapeFillType':
        """

        """
        GetDllLibXls().XlsShapeFill_get_FillType.argtypes=[c_void_p]
        GetDllLibXls().XlsShapeFill_get_FillType.restype=c_int
        ret = CallCFunction(GetDllLibXls().XlsShapeFill_get_FillType, self.Ptr)
        objwraped = ShapeFillType(ret)
        return objwraped

    @FillType.setter
    def FillType(self, value:'ShapeFillType'):
        GetDllLibXls().XlsShapeFill_set_FillType.argtypes=[c_void_p, c_int]
        CallCFunction(GetDllLibXls().XlsShapeFill_set_FillType, self.Ptr, value.value)

    @property

    def GradientStyle(self)->'GradientStyleType':
        """

        """
        GetDllLibXls().XlsShapeFill_get_GradientStyle.argtypes=[c_void_p]
        GetDllLibXls().XlsShapeFill_get_GradientStyle.restype=c_int
        ret = CallCFunction(GetDllLibXls().XlsShapeFill_get_GradientStyle, self.Ptr)
        objwraped = GradientStyleType(ret)
        return objwraped

    @GradientStyle.setter
    def GradientStyle(self, value:'GradientStyleType'):
        GetDllLibXls().XlsShapeFill_set_GradientStyle.argtypes=[c_void_p, c_int]
        CallCFunction(GetDllLibXls().XlsShapeFill_set_GradientStyle, self.Ptr, value.value)

    @property

    def GradientVariant(self)->'GradientVariantsType':
        """

        """
        GetDllLibXls().XlsShapeFill_get_GradientVariant.argtypes=[c_void_p]
        GetDllLibXls().XlsShapeFill_get_GradientVariant.restype=c_int
        ret = CallCFunction(GetDllLibXls().XlsShapeFill_get_GradientVariant, self.Ptr)
        objwraped = GradientVariantsType(ret)
        return objwraped

    @GradientVariant.setter
    def GradientVariant(self, value:'GradientVariantsType'):
        GetDllLibXls().XlsShapeFill_set_GradientVariant.argtypes=[c_void_p, c_int]
        CallCFunction(GetDllLibXls().XlsShapeFill_set_GradientVariant, self.Ptr, value.value)

    @property
    def Transparency(self)->float:
        """

        """
        GetDllLibXls().XlsShapeFill_get_Transparency.argtypes=[c_void_p]
        GetDllLibXls().XlsShapeFill_get_Transparency.restype=c_double
        ret = CallCFunction(GetDllLibXls().XlsShapeFill_get_Transparency, self.Ptr)
        return ret

    @Transparency.setter
    def Transparency(self, value:float):
        GetDllLibXls().XlsShapeFill_set_Transparency.argtypes=[c_void_p, c_double]
        CallCFunction(GetDllLibXls().XlsShapeFill_set_Transparency, self.Ptr, value)

    @property
    def TransparencyFrom(self)->float:
        """

        """
        GetDllLibXls().XlsShapeFill_get_TransparencyFrom.argtypes=[c_void_p]
        GetDllLibXls().XlsShapeFill_get_TransparencyFrom.restype=c_double
        ret = CallCFunction(GetDllLibXls().XlsShapeFill_get_TransparencyFrom, self.Ptr)
        return ret

    @TransparencyFrom.setter
    def TransparencyFrom(self, value:float):
        GetDllLibXls().XlsShapeFill_set_TransparencyFrom.argtypes=[c_void_p, c_double]
        CallCFunction(GetDllLibXls().XlsShapeFill_set_TransparencyFrom, self.Ptr, value)

    @property
    def TransparencyTo(self)->float:
        """

        """
        GetDllLibXls().XlsShapeFill_get_TransparencyTo.argtypes=[c_void_p]
        GetDllLibXls().XlsShapeFill_get_TransparencyTo.restype=c_double
        ret = CallCFunction(GetDllLibXls().XlsShapeFill_get_TransparencyTo, self.Ptr)
        return ret

    @TransparencyTo.setter
    def TransparencyTo(self, value:float):
        GetDllLibXls().XlsShapeFill_set_TransparencyTo.argtypes=[c_void_p, c_double]
        CallCFunction(GetDllLibXls().XlsShapeFill_set_TransparencyTo, self.Ptr, value)

    @property
    def Visible(self)->bool:
        """

        """
        GetDllLibXls().XlsShapeFill_get_Visible.argtypes=[c_void_p]
        GetDllLibXls().XlsShapeFill_get_Visible.restype=c_bool
        ret = CallCFunction(GetDllLibXls().XlsShapeFill_get_Visible, self.Ptr)
        return ret

    @Visible.setter
    def Visible(self, value:bool):
        GetDllLibXls().XlsShapeFill_set_Visible.argtypes=[c_void_p, c_bool]
        CallCFunction(GetDllLibXls().XlsShapeFill_set_Visible, self.Ptr, value)

    @property

    def BackKnownColor(self)->'ExcelColors':
        """

        """
        GetDllLibXls().XlsShapeFill_get_BackKnownColor.argtypes=[c_void_p]
        GetDllLibXls().XlsShapeFill_get_BackKnownColor.restype=c_int
        ret = CallCFunction(GetDllLibXls().XlsShapeFill_get_BackKnownColor, self.Ptr)
        objwraped = ExcelColors(ret)
        return objwraped

    @BackKnownColor.setter
    def BackKnownColor(self, value:'ExcelColors'):
        GetDllLibXls().XlsShapeFill_set_BackKnownColor.argtypes=[c_void_p, c_int]
        CallCFunction(GetDllLibXls().XlsShapeFill_set_BackKnownColor, self.Ptr, value.value)

    @property

    def ForeKnownColor(self)->'ExcelColors':
        """

        """
        GetDllLibXls().XlsShapeFill_get_ForeKnownColor.argtypes=[c_void_p]
        GetDllLibXls().XlsShapeFill_get_ForeKnownColor.restype=c_int
        ret = CallCFunction(GetDllLibXls().XlsShapeFill_get_ForeKnownColor, self.Ptr)
        objwraped = ExcelColors(ret)
        return objwraped

    @ForeKnownColor.setter
    def ForeKnownColor(self, value:'ExcelColors'):
        GetDllLibXls().XlsShapeFill_set_ForeKnownColor.argtypes=[c_void_p, c_int]
        CallCFunction(GetDllLibXls().XlsShapeFill_set_ForeKnownColor, self.Ptr, value.value)

    @property

    def BackColor(self)->'Color':
        """

        """
        GetDllLibXls().XlsShapeFill_get_BackColor.argtypes=[c_void_p]
        GetDllLibXls().XlsShapeFill_get_BackColor.restype=c_void_p
        intPtr = CallCFunction(GetDllLibXls().XlsShapeFill_get_BackColor, self.Ptr)
        ret = None if intPtr==None else Color(intPtr)
        return ret


    @BackColor.setter
    def BackColor(self, value:'Color'):
        GetDllLibXls().XlsShapeFill_set_BackColor.argtypes=[c_void_p, c_void_p]
        CallCFunction(GetDllLibXls().XlsShapeFill_set_BackColor, self.Ptr, value.Ptr)

    @property

    def ForeColor(self)->'Color':
        """

        """
        GetDllLibXls().XlsShapeFill_get_ForeColor.argtypes=[c_void_p]
        GetDllLibXls().XlsShapeFill_get_ForeColor.restype=c_void_p
        intPtr = CallCFunction(GetDllLibXls().XlsShapeFill_get_ForeColor, self.Ptr)
        ret = None if intPtr==None else Color(intPtr)
        return ret


    @ForeColor.setter
    def ForeColor(self, value:'Color'):
        GetDllLibXls().XlsShapeFill_set_ForeColor.argtypes=[c_void_p, c_void_p]
        CallCFunction(GetDllLibXls().XlsShapeFill_set_ForeColor, self.Ptr, value.Ptr)

    @property

    def BackColorObject(self)->'OColor':
        """

        """
        GetDllLibXls().XlsShapeFill_get_BackColorObject.argtypes=[c_void_p]
        GetDllLibXls().XlsShapeFill_get_BackColorObject.restype=c_void_p
        intPtr = CallCFunction(GetDllLibXls().XlsShapeFill_get_BackColorObject, self.Ptr)
        ret = None if intPtr==None else OColor(intPtr)
        return ret


    @property

    def ForeColorObject(self)->'OColor':
        """

        """
        GetDllLibXls().XlsShapeFill_get_ForeColorObject.argtypes=[c_void_p]
        GetDllLibXls().XlsShapeFill_get_ForeColorObject.restype=c_void_p
        intPtr = CallCFunction(GetDllLibXls().XlsShapeFill_get_ForeColorObject, self.Ptr)
        ret = None if intPtr==None else OColor(intPtr)
        return ret


    @property

    def GradientColorType(self)->'GradientColorType':
        """

        """
        GetDllLibXls().XlsShapeFill_get_GradientColorType.argtypes=[c_void_p]
        GetDllLibXls().XlsShapeFill_get_GradientColorType.restype=c_int
        ret = CallCFunction(GetDllLibXls().XlsShapeFill_get_GradientColorType, self.Ptr)
        objwraped = GradientColorType(ret)
        return objwraped

    @GradientColorType.setter
    def GradientColorType(self, value:'GradientColorType'):
        GetDllLibXls().XlsShapeFill_set_GradientColorType.argtypes=[c_void_p, c_int]
        CallCFunction(GetDllLibXls().XlsShapeFill_set_GradientColorType, self.Ptr, value.value)

    @property

    def Texture(self)->'GradientTextureType':
        """

        """
        GetDllLibXls().XlsShapeFill_get_Texture.argtypes=[c_void_p]
        GetDllLibXls().XlsShapeFill_get_Texture.restype=c_int
        ret = CallCFunction(GetDllLibXls().XlsShapeFill_get_Texture, self.Ptr)
        objwraped = GradientTextureType(ret)
        return objwraped

    @Texture.setter
    def Texture(self, value:'GradientTextureType'):
        GetDllLibXls().XlsShapeFill_set_Texture.argtypes=[c_void_p, c_int]
        CallCFunction(GetDllLibXls().XlsShapeFill_set_Texture, self.Ptr, value.value)

    @property

    def Pattern(self)->'GradientPatternType':
        """

        """
        GetDllLibXls().XlsShapeFill_get_Pattern.argtypes=[c_void_p]
        GetDllLibXls().XlsShapeFill_get_Pattern.restype=c_int
        ret = CallCFunction(GetDllLibXls().XlsShapeFill_get_Pattern, self.Ptr)
        objwraped = GradientPatternType(ret)
        return objwraped

    @Pattern.setter
    def Pattern(self, value:'GradientPatternType'):
        GetDllLibXls().XlsShapeFill_set_Pattern.argtypes=[c_void_p, c_int]
        CallCFunction(GetDllLibXls().XlsShapeFill_set_Pattern, self.Ptr, value.value)

    @property

    def PresetGradientType(self)->'GradientPresetType':
        """

        """
        GetDllLibXls().XlsShapeFill_get_PresetGradientType.argtypes=[c_void_p]
        GetDllLibXls().XlsShapeFill_get_PresetGradientType.restype=c_int
        ret = CallCFunction(GetDllLibXls().XlsShapeFill_get_PresetGradientType, self.Ptr)
        objwraped = GradientPresetType(ret)
        return objwraped

    @PresetGradientType.setter
    def PresetGradientType(self, value:'GradientPresetType'):
        GetDllLibXls().XlsShapeFill_set_PresetGradientType.argtypes=[c_void_p, c_int]
        CallCFunction(GetDllLibXls().XlsShapeFill_set_PresetGradientType, self.Ptr, value.value)

    @property

    def Picture(self)->'Stream':
        """

        """
        GetDllLibXls().XlsShapeFill_get_Picture.argtypes=[c_void_p]
        GetDllLibXls().XlsShapeFill_get_Picture.restype=c_void_p
        intPtr = CallCFunction(GetDllLibXls().XlsShapeFill_get_Picture, self.Ptr)
        ret = None if intPtr==None else Stream(intPtr)
        return ret


    @property

    def PictureName(self)->str:
        """

        """
        GetDllLibXls().XlsShapeFill_get_PictureName.argtypes=[c_void_p]
        GetDllLibXls().XlsShapeFill_get_PictureName.restype=c_void_p
        ret = PtrToStr(CallCFunction(GetDllLibXls().XlsShapeFill_get_PictureName, self.Ptr))
        return ret


    @property
    def GradientDegree(self)->float:
        """

        """
        GetDllLibXls().XlsShapeFill_get_GradientDegree.argtypes=[c_void_p]
        GetDllLibXls().XlsShapeFill_get_GradientDegree.restype=c_double
        ret = CallCFunction(GetDllLibXls().XlsShapeFill_get_GradientDegree, self.Ptr)
        return ret

    @GradientDegree.setter
    def GradientDegree(self, value:float):
        GetDllLibXls().XlsShapeFill_set_GradientDegree.argtypes=[c_void_p, c_double]
        CallCFunction(GetDllLibXls().XlsShapeFill_set_GradientDegree, self.Ptr, value)

    @property
    def IsGradientSupported(self)->bool:
        """

        """
        GetDllLibXls().XlsShapeFill_get_IsGradientSupported.argtypes=[c_void_p]
        GetDllLibXls().XlsShapeFill_get_IsGradientSupported.restype=c_bool
        ret = CallCFunction(GetDllLibXls().XlsShapeFill_get_IsGradientSupported, self.Ptr)
        return ret

    @IsGradientSupported.setter
    def IsGradientSupported(self, value:bool):
        GetDllLibXls().XlsShapeFill_set_IsGradientSupported.argtypes=[c_void_p, c_bool]
        CallCFunction(GetDllLibXls().XlsShapeFill_set_IsGradientSupported, self.Ptr, value)

    @property
    def Tile(self)->bool:
        """

        """
        GetDllLibXls().XlsShapeFill_get_Tile.argtypes=[c_void_p]
        GetDllLibXls().XlsShapeFill_get_Tile.restype=c_bool
        ret = CallCFunction(GetDllLibXls().XlsShapeFill_get_Tile, self.Ptr)
        return ret

    @Tile.setter
    def Tile(self, value:bool):
        GetDllLibXls().XlsShapeFill_set_Tile.argtypes=[c_void_p, c_bool]
        CallCFunction(GetDllLibXls().XlsShapeFill_set_Tile, self.Ptr, value)

    @property

    def PicStretch(self)->'PicStretch':
        """

        """
        GetDllLibXls().XlsShapeFill_get_PicStretch.argtypes=[c_void_p]
        GetDllLibXls().XlsShapeFill_get_PicStretch.restype=c_void_p
        intPtr = CallCFunction(GetDllLibXls().XlsShapeFill_get_PicStretch, self.Ptr)
        ret = None if intPtr==None else PicStretch(intPtr)
        return ret


    @PicStretch.setter
    def PicStretch(self, value:'PicStretch'):
        GetDllLibXls().XlsShapeFill_set_PicStretch.argtypes=[c_void_p, c_void_p]
        CallCFunction(GetDllLibXls().XlsShapeFill_set_PicStretch, self.Ptr, value.Ptr)

    @property

    def PicTile(self)->'PicTile':
        """

        """
        GetDllLibXls().XlsShapeFill_get_PicTile.argtypes=[c_void_p]
        GetDllLibXls().XlsShapeFill_get_PicTile.restype=c_void_p
        intPtr = CallCFunction(GetDllLibXls().XlsShapeFill_get_PicTile, self.Ptr)
        ret = None if intPtr==None else PicTile(intPtr)
        return ret


    @PicTile.setter
    def PicTile(self, value:'PicTile'):
        GetDllLibXls().XlsShapeFill_set_PicTile.argtypes=[c_void_p, c_void_p]
        CallCFunction(GetDllLibXls().XlsShapeFill_set_PicTile, self.Ptr, value.Ptr)

    @staticmethod

    def IsDoubled(gradientStyle:'GradientStyleType',variant:'GradientVariantsType')->bool:
        """

        """
        enumgradientStyle:c_int = gradientStyle.value
        enumvariant:c_int = variant.value

        GetDllLibXls().XlsShapeFill_IsDoubled.argtypes=[ c_int,c_int]
        GetDllLibXls().XlsShapeFill_IsDoubled.restype=c_bool
        ret = CallCFunction(GetDllLibXls().XlsShapeFill_IsDoubled,  enumgradientStyle,enumvariant)
        return ret

    @staticmethod

    def IsInverted(gradientStyle:'GradientStyleType',variant:'GradientVariantsType')->bool:
        """

        """
        enumgradientStyle:c_int = gradientStyle.value
        enumvariant:c_int = variant.value

        GetDllLibXls().XlsShapeFill_IsInverted.argtypes=[ c_int,c_int]
        GetDllLibXls().XlsShapeFill_IsInverted.restype=c_bool
        ret = CallCFunction(GetDllLibXls().XlsShapeFill_IsInverted,  enumgradientStyle,enumvariant)
        return ret


    def CompareTo(self ,twin:'IGradient')->int:
        """

        """
        intPtrtwin:c_void_p = twin.Ptr

        GetDllLibXls().XlsShapeFill_CompareTo.argtypes=[c_void_p ,c_void_p]
        GetDllLibXls().XlsShapeFill_CompareTo.restype=c_int
        ret = CallCFunction(GetDllLibXls().XlsShapeFill_CompareTo, self.Ptr, intPtrtwin)
        return ret

    @dispatch

    def CustomPicture(self ,path:str):
        """

        """
        
        GetDllLibXls().XlsShapeFill_CustomPicture.argtypes=[c_void_p ,c_void_p]
        CallCFunction(GetDllLibXls().XlsShapeFill_CustomPicture, self.Ptr, path)

    @dispatch

    def CustomPicture(self ,im:Stream,name:str):
        """

        """
        intPtrim:c_void_p = im.Ptr

        GetDllLibXls().XlsShapeFill_CustomPictureIN.argtypes=[c_void_p ,c_void_p,c_void_p]
        CallCFunction(GetDllLibXls().XlsShapeFill_CustomPictureIN, self.Ptr, intPtrim,name)

    @dispatch

    def CustomTexture(self ,path:str):
        """

        """
        
        GetDllLibXls().XlsShapeFill_CustomTexture.argtypes=[c_void_p ,c_void_p]
        CallCFunction(GetDllLibXls().XlsShapeFill_CustomTexture, self.Ptr, path)

    @dispatch

    def CustomTexture(self ,im:Stream,name:str):
        """

        """
        intPtrim:c_void_p = im.Ptr

        GetDllLibXls().XlsShapeFill_CustomTextureIN.argtypes=[c_void_p ,c_void_p,c_void_p]
        CallCFunction(GetDllLibXls().XlsShapeFill_CustomTextureIN, self.Ptr, intPtrim,name)


    def Patterned(self ,pattern:'GradientPatternType'):
        """

        """
        enumpattern:c_int = pattern.value

        GetDllLibXls().XlsShapeFill_Patterned.argtypes=[c_void_p ,c_int]
        CallCFunction(GetDllLibXls().XlsShapeFill_Patterned, self.Ptr, enumpattern)

    @dispatch

    def PresetGradient(self ,grad:GradientPresetType):
        """

        """
        enumgrad:c_int = grad.value

        GetDllLibXls().XlsShapeFill_PresetGradient.argtypes=[c_void_p ,c_int]
        CallCFunction(GetDllLibXls().XlsShapeFill_PresetGradient, self.Ptr, enumgrad)

    @dispatch

    def PresetGradient(self ,grad:GradientPresetType,shadStyle:GradientStyleType):
        """

        """
        enumgrad:c_int = grad.value
        enumshadStyle:c_int = shadStyle.value

        GetDllLibXls().XlsShapeFill_PresetGradientGS.argtypes=[c_void_p ,c_int,c_int]
        CallCFunction(GetDllLibXls().XlsShapeFill_PresetGradientGS, self.Ptr, enumgrad,enumshadStyle)

    @dispatch

    def PresetGradient(self ,grad:GradientPresetType,shadStyle:GradientStyleType,shadVar:GradientVariantsType):
        """

        """
        enumgrad:c_int = grad.value
        enumshadStyle:c_int = shadStyle.value
        enumshadVar:c_int = shadVar.value

        GetDllLibXls().XlsShapeFill_PresetGradientGSS.argtypes=[c_void_p ,c_int,c_int,c_int]
        CallCFunction(GetDllLibXls().XlsShapeFill_PresetGradientGSS, self.Ptr, enumgrad,enumshadStyle,enumshadVar)


    def PresetTextured(self ,texture:'GradientTextureType'):
        """

        """
        enumtexture:c_int = texture.value

        GetDllLibXls().XlsShapeFill_PresetTextured.argtypes=[c_void_p ,c_int]
        CallCFunction(GetDllLibXls().XlsShapeFill_PresetTextured, self.Ptr, enumtexture)

    @dispatch
    def TwoColorGradient(self):
        """

        """
        GetDllLibXls().XlsShapeFill_TwoColorGradient.argtypes=[c_void_p]
        CallCFunction(GetDllLibXls().XlsShapeFill_TwoColorGradient, self.Ptr)

    @dispatch

    def TwoColorGradient(self ,style:GradientStyleType):
        """

        """
        enumstyle:c_int = style.value

        GetDllLibXls().XlsShapeFill_TwoColorGradientS.argtypes=[c_void_p ,c_int]
        CallCFunction(GetDllLibXls().XlsShapeFill_TwoColorGradientS, self.Ptr, enumstyle)

    @dispatch

    def TwoColorGradient(self ,style:GradientStyleType,variant:GradientVariantsType):
        """

        """
        enumstyle:c_int = style.value
        enumvariant:c_int = variant.value

        GetDllLibXls().XlsShapeFill_TwoColorGradientSV.argtypes=[c_void_p ,c_int,c_int]
        CallCFunction(GetDllLibXls().XlsShapeFill_TwoColorGradientSV, self.Ptr, enumstyle,enumvariant)

    @dispatch
    def OneColorGradient(self):
        """

        """
        GetDllLibXls().XlsShapeFill_OneColorGradient.argtypes=[c_void_p]
        CallCFunction(GetDllLibXls().XlsShapeFill_OneColorGradient, self.Ptr)

    @dispatch

    def OneColorGradient(self ,style:GradientStyleType):
        """

        """
        enumstyle:c_int = style.value

        GetDllLibXls().XlsShapeFill_OneColorGradientS.argtypes=[c_void_p ,c_int]
        CallCFunction(GetDllLibXls().XlsShapeFill_OneColorGradientS, self.Ptr, enumstyle)

    @dispatch

    def OneColorGradient(self ,style:GradientStyleType,variant:GradientVariantsType):
        """

        """
        enumstyle:c_int = style.value
        enumvariant:c_int = variant.value

        GetDllLibXls().XlsShapeFill_OneColorGradientSV.argtypes=[c_void_p ,c_int,c_int]
        CallCFunction(GetDllLibXls().XlsShapeFill_OneColorGradientSV, self.Ptr, enumstyle,enumvariant)

    def Solid(self):
        """

        """
        GetDllLibXls().XlsShapeFill_Solid.argtypes=[c_void_p]
        CallCFunction(GetDllLibXls().XlsShapeFill_Solid, self.Ptr)


    def Clone(self ,parent:'SpireObject')->'XlsShapeFill':
        """

        """
        intPtrparent:c_void_p = parent.Ptr

        GetDllLibXls().XlsShapeFill_Clone.argtypes=[c_void_p ,c_void_p]
        GetDllLibXls().XlsShapeFill_Clone.restype=c_void_p
        intPtr = CallCFunction(GetDllLibXls().XlsShapeFill_Clone, self.Ptr, intPtrparent)
        ret = None if intPtr==None else XlsShapeFill(intPtr)
        return ret


